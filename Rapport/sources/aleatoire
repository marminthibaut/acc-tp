/**
 * A random flow network generator
 * Attention si le graph passe en parametre contient des arcs ceux-ci seront
 * supprime.
 * @param graph une reference vers un graph initialiser avec un nombre de sommets
 * @param rate la proportion d'arcs a ajouter au graphe en pourcentage par rapport au graphe complet.
 * @param min_weight valuation minimal des arcs
 * @param max_weight valuation maximal des arcs
 */
void
flowNetworkGenerator(AbstractGraph& graph, float rate, uint min_weight = 1,
    uint max_weight = 1);

\subsection{Fonctions generales}

/**
 * Cette procedure genere une chaine de caracteres representant l'affichage
 * de la valeur total du flot sur le reseau de transport ainsi que la valeur
 * du flot sur chaque arc.
 * @param flow_network le reseau de transport
 * @param residual_network le graphe d'ecart associe
 */
string
flowToString(const AbstractGraph& flow_network,
    const AbstractGraph& residual_network);



\subsection{Edmonds-Karp}

/**
 * Cette fonction retourne le plus court chemin en nombre d'arcs depuis
 * le sommet start jusqu'au sommet end
 * @param g un graphe
 * @param start le sommet de depart
 * @param end le sommet d'arriver
 * @return le plus court chemin en nombre d'arcs de start a end
 */
path_t
leastArcsPath(AbstractGraph &g, vertex_t start, vertex_t end);

/**
 * Cette fonction retourne la plus petite valuation presente sur un chemin 
 * donne dans un graphe
 * @param g un graphe
 * @param path une chemin dans g
 * @return la plus petite valuation presente sur le chemin path dans g 
 */
weight_t
lightestArc(AbstractGraph& g, path_t path);

/**
 * Cette fonction converti un chemin en chaine de caractere dans un but d'affichage
 * @param path le chemin
 * @param g le graphe
 */
string
pathToString(path_t path, const AbstractGraph& g);

/**
 * Mise a jour du graphe d'ecart depuis un chemin et la valeur du flot a ajouter
 * sur ce chemin
 * @param le graphe de couche
 * @param p le chemin
 * @param k la valeur du flot a ajouter
 */
void
updateResidualNetwork(AbstractGraph& residualNetwork, path_t p, uint k);


/**
 * algorithme d'Edmonds-Karp
 * @param flow_network le reseau de transport
 * @param src le sommet source
 * @param dest le puit
 * @return le graphe d'ecart final
 */
AdjacencyListGraph
edmondsKarp(const AbstractGraph& flow_network, vertex_t src, vertex_t dest);
